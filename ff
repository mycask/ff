#!/bin/sh

# ff - Resolve a path pattern to an absolute path.

# The MIT License (MIT)
#
# Copyright (c) 2017 Susam Pal
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Starting point of this script.
#
# Arguments:
#   arg...: All arguments this script is invoked with.
main()
{
    . fcom
    parse_arguments "$@"
    [ -r "$FFPATH_CACHE" ] || quit Cannot read "$FFPATH_CACHE".
    find_in_path_cache
}


# Resolve specified pattern to absolute path and print.
#
# Arguments:
#   path: Path to a file or directory.
#
# Errors:
#   Log an error to standard error if the path is not found.
find_in_path_cache()
{
    # Match filename.
    re1=/$pattern$

    # Match intermediate directory name.
    re2=/$pattern/

    # Match any part of the pattern.
    re3=$pattern

    # For each regular expression, search file index.
    for p in "$re1" "$re2" "$re3"
    do
        [ "$verbose" = yes ] && log Searching "$FFPATH_CACHE" for \""$p"\" ...
        if f=$(grep -E "$p" "$FFPATH_CACHE") && [ -n "$f" ]
        then
            [ "$all" != yes ] && f=$(printf "%s\n" "$f" | head -n 1)
            if [ "$all" = yes ]
            then
                printf "%s\n" "$f"
            else
                printf "%s\n" "$f" | head -n 1
            fi
            return
        fi
    done

    [ -z "$f" ] && log Cannot find a match for \""$pattern"\" in FFPATH &&
    return 1 || return 0
}


# Parse command line arguments passed to this script.
#
# Arguments:
#   arg...: All arguments this script is invoked with.
#
# Errors:
#   Exit with an error message when invalid arguments are specified.
parse_arguments()
{
    while [ $# -gt 0 ]
    do
        case $1 in
            -a | --all)
                all=yes
                shift
                ;;
            -d | --debug)
                verbose=yes
                shift
                ;;
            -h | --help)
                show_help
                exit
                ;;
            -v | --version)
                show_version
                exit
                ;;
            -?*)
                quit Unknown option \""$1"\".
                ;;
            *)
                break 
                ;;
        esac
    done

    [ $# -eq 0 ] && quit Missing required argument: PATTERN.

    pattern=$1
    shift

    # If there are multiple patterns, all patterns must be present as
    # substrings in the path of matching files in the same order as
    # provided in the command line arguments.
    while [ "$#" -gt 0 ]
    do
        pattern="$pattern.*$1"
        shift
    done
}


# Show help.
show_help()
{
    printf "%s\n" \
"Usage: $NAME [-h] [-v] [PATH ...]

Resolve PATH to absolute path.

An absolute or a partial path to a file or a directory may be specified
as PATH. If PATH is not specified, it defaults to \$ADE_VIEW_ROOT.

If there are multiple PATH arguments, then the first known path to a
file that contains all the specified PATH arguments as substrings in the
same order as specified is the output.

Options:
  -d, --debug    Run in verbose mode.
  -h, --help     Show this help and exit.
  -v, --version  Show version and exit.

Report bugs to <$SUPPORT_URL>."
}


# Start.
main "$@"
